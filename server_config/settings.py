"""
Configuration settings for join_backend project.

This module contains all configuration parameters for the Django application.
It defines application behavior including security settings, middleware,
database connections, static files handling, and more.

Originally generated by 'django-admin startproject' using Django 5.1.5.

Reference documentation:
- General settings: https://docs.djangoproject.com/en/5.1/topics/settings/
- Full settings list: https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv, find_dotenv

def loadEnvironmentVariables():
    """Load environment variables from .env file."""
    load_dotenv(find_dotenv())

# Initialize environment
loadEnvironmentVariables()

# Core file structure configuration
PROJECT_ROOT = Path(__file__).resolve().parent.parent

def configureCoreSettings():
    """
    Configure core application settings including security parameters.
    
    Returns:
        dict: Core Django configuration settings
    """
    return {
        # Security settings - protect in production environments
        'SECRET_KEY': os.getenv("DJANGO_SECRET_KEY", "replace-in-production-environment!"),
        
        # Production safety settings
        'DEBUG': True,  # Development mode
        
        # Hosts allowed to serve this application
        'ALLOWED_HOSTS': ['127.0.0.1', 'localhost', 'ogulcan-erdag.developerakademie.net'],
        
        # Custom user model definition
        'AUTH_USER_MODEL': 'auth_module.EmailBasedAuthenticationUser',
    }

def configureApplicationComponents():
    """
    Configure application components including apps and middleware.
    
    Returns:
        dict: Application components configuration
    """
    return {
        # Registered Django applications
        'INSTALLED_APPS': [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'rest_framework',
            'rest_framework.authtoken',
            'corsheaders',
            'core_api',
            'auth_module',
            'whitenoise.runserver_nostatic'    
        ],
        
        # Middleware processing chain
        'MIDDLEWARE': [
            'django.middleware.security.SecurityMiddleware',
            'whitenoise.middleware.WhiteNoiseMiddleware',
            'corsheaders.middleware.CorsMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ],
        
        # URL configuration root
        'ROOT_URLCONF': 'server_config.urls',
        
        # Template processing configuration
        'TEMPLATES': [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ],
        
        # WSGI application entry point
        'WSGI_APPLICATION': 'server_config.wsgi.application',
    }

def configureCrossSiteSettings():
    """
    Configure cross-origin resource sharing and CSRF settings.
    
    Returns:
        dict: Cross-site security configuration
    """
    allowedOrigins = [
        'http://127.0.0.1:5500',
        'http://localhost:5500',
        'http://127.0.0.1:8000',
        'https://ogulcan-erdag.developerakademie.net',
        'file://',  # For local file access
    ]
    
    return {
        'CSRF_TRUSTED_ORIGINS': allowedOrigins,
        'CORS_ALLOWED_ORIGINS': allowedOrigins,
        'CORS_ALLOW_ALL_ORIGINS': True,  # For development only
        'CORS_ALLOW_CREDENTIALS': True,
        'CORS_ALLOW_METHODS': [
            'DELETE',
            'GET',
            'OPTIONS',
            'PATCH',
            'POST',
            'PUT',
        ],
        'CORS_ALLOW_HEADERS': [
            'accept',
            'accept-encoding',
            'authorization',
            'content-type',
            'dnt',
            'origin',
            'user-agent',
            'x-csrftoken',
            'x-requested-with',
        ],
    }

def configureDatabaseSettings():
    """
    Configure database connection settings.
    
    Returns:
        dict: Database configuration
    """
    return {
        'DATABASES': {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': PROJECT_ROOT / 'db.sqlite3',
            }
        },
        
        # Default field type for primary keys
        'DEFAULT_AUTO_FIELD': 'django.db.models.BigAutoField',
    }

def configureSecuritySettings():
    """
    Configure security-related settings including password validation.
    
    Returns:
        dict: Security configuration
    """
    return {
        'AUTH_PASSWORD_VALIDATORS': [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ],
    }

def configureInternationalization():
    """
    Configure language and timezone settings.
    
    Returns:
        dict: Internationalization configuration
    """
    return {
        'LANGUAGE_CODE': 'en-us',
        'TIME_ZONE': 'UTC',
        'USE_I18N': True,
        'USE_TZ': True,
    }

def configureStaticFiles():
    """
    Configure static file handling and storage.
    
    Returns:
        dict: Static files configuration
    """
    return {
        'STATIC_URL': '/static/',
        'STATIC_ROOT': PROJECT_ROOT / 'staticfiles',  # Collection directory
        'STATICFILES_STORAGE': "whitenoise.storage.CompressedManifestStaticFilesStorage",  # Whitenoise storage system
    }

def configureLogging():
    """
    Configure application logging settings.
    
    Returns:
        dict: Logging configuration
    """
    return {
        'LOGGING': {
            'version': 1,
            'disable_existing_loggers': False,
            'handlers': {
                'file': {
                    'level': 'ERROR',
                    'class': 'logging.FileHandler',
                    'filename': PROJECT_ROOT / 'errors.log',
                },
            },
            'loggers': {
                'django': {
                    'handlers': ['file'],
                    'level': 'ERROR',
                    'propagate': True,
                },
            },
        },
    }

def configureApiSettings():
    """
    Configure REST Framework API settings.
    
    Returns:
        dict: API framework configuration
    """
    return {
        'REST_FRAMEWORK': {
            'DEFAULT_PERMISSION_CLASSES': [
                'rest_framework.permissions.IsAuthenticated',
            ],
            'DEFAULT_AUTHENTICATION_CLASSES': [
                'rest_framework.authentication.TokenAuthentication',
                'rest_framework.authentication.SessionAuthentication',
            ],    
        },
    }

# Assemble all settings
def assembleConfiguration():
    """
    Combine all configuration sections into the final settings dictionary.
    
    Returns:
        dict: Complete Django settings
    """
    configuration = {}
    
    # Add configuration sections
    configSections = [
        configureCoreSettings(),
        configureApplicationComponents(),
        configureCrossSiteSettings(),
        configureDatabaseSettings(),
        configureSecuritySettings(),
        configureInternationalization(),
        configureStaticFiles(),
        configureLogging(),
        configureApiSettings(),
    ]
    
    # Merge all sections
    for section in configSections:
        configuration.update(section)
    
    return configuration

# Create globals for Django settings module
globals().update(assembleConfiguration())